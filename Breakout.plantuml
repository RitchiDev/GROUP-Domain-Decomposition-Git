@startuml Breakout
skinparam style strictuml
skinparam SequenceMessageAlignment center
skinparam DefaultFontName Arial
skinparam DefaultFontSize 16
skinparam DefaultFontStyle bold

Enlarge -> Player
Laser -> Player
class "Player" as Player
{
    paddleSize : float

    private void Update();
    private void Input();
}

Slow -> GameManager
Disruption -> GameManager
Break -> GameManager
Health -> GameManager
class "GameManager" as GameManager
{
    ballSpeed : float
    balls : List<Balls>
    ballDmg : float
    gameHealth : int

    public void MultiplyBalls(int ballMultiplier);
}

Powerups <|-- Enlarge
Powerups <|-- Slow
Powerups <|-- Disruption
Powerups <|-- Laser
Powerups <|-- Catch
Powerups <|-- Break
Powerups <|-- Health
class "PowerUps" as Powerups
{
    postition : Vector2
    duration : float
    stackable : bool
    
    protected virtual void Update();
    protected virtual void Activate();
    protected virtual void Deactivate();
    private void OnTriggerEnter2D(Collider2D col);
}

class "Enlarge" as Enlarge
{
    enlargementFactor : float
}

class "Slow" as Slow
{
    speedReduction : float
}

class "Disruption" as Disruption
{
    ballMultiplier : int
}

class "Laser" as Laser
{
    laserMultiplier : int
}

class "Catch" as Catch
{
    releaseTimer : float
    public void ReleaseBall()
}

class "Break" as Break
{
    damageMultiplier : int
}

class "Health" as Health
{
    void IncreasePlayerHealth();
}

class "Brick" as Brick
{
    durability : int
    position : Vector2
    points : int

    public virtual void Initialize();
    public virtual void Deactivate();
    private void DropPowerUp();
}

Brick <|-- Clay
class "Clay" as Clay
{
    color : Color
}

Brick <|-- Silver
class "Silver" as Silver
{
    moveDirection = Vector2
    private void Move();
}

Brick <|-- Gold
class "Gold" as Gold
{
    bombSpawnTime = float
    private void DropBomb();
}

class MultiplayerHandler
{
    players : Dictionary<Device, Player> 
    maxPlayerCount : int

    private void AddPlayer();
    private void RemovePlayer();
    public void OnNewDevice(Device someDevice);
    public void OnDeviceDisconnect(Device someDevice);
}
@enduml